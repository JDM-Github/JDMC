
#include "JDM.h"

class WWindow : public Window
{
public:
    JSHORT NavX, RX = 1;
    JSHORT NavY, RY = 1;
    JSHORT BlockW, BRows, BCols;
    JWSTR Board;
    JWSTR ChessPieces[6];

public:
    WWindow() : Window("Game", 200, 220, 3) {}
    JBOOL onUserCreate()
    {
        BRows = BCols = 8;
        BlockW = (float)GetWidth() * 0.1;
        NavX = BlockW;
        NavY = (BlockW + (GetHeight() - GetWidth()) / 2);

        Board += L"rnbqkbnr";
        Board += L"pppppppp";
        Board += L"........";
        Board += L"........";
        Board += L"........";
        Board += L"........";
        Board += L"PPPPPPPP";
        Board += L"RNBQKBNR";

        ChessPieces[0] += L"                    \n";
        ChessPieces[0] += L"                    \n";
        ChessPieces[0] += L"                    \n";
        ChessPieces[0] += L"                    \n";
        ChessPieces[0] += L"                    \n";
        ChessPieces[0] += L"                    \n";
        ChessPieces[0] += L"        0000        \n";
        ChessPieces[0] += L"       0FFFF0       \n";
        ChessPieces[0] += L"      08777FF0      \n";
        ChessPieces[0] += L"      0877FFF0      \n";
        ChessPieces[0] += L"      087FFFF0      \n";
        ChessPieces[0] += L"      087FFFF0      \n";
        ChessPieces[0] += L"       08FFF0       \n";
        ChessPieces[0] += L"        08F0        \n";
        ChessPieces[0] += L"        08F0        \n";
        ChessPieces[0] += L"       087FF0       \n";
        ChessPieces[0] += L"       087FF0       \n";
        ChessPieces[0] += L"      0887FFF0      \n";
        ChessPieces[0] += L"      0887FFF0      \n";
        ChessPieces[0] += L"     088877FFF0     \n";
        ChessPieces[0] += L"     0888877FF0     \n";
        ChessPieces[0] += L"    000000000000    \n";
        ChessPieces[0] += L"    088877FFFFF0    \n";
        ChessPieces[0] += L"    000000000000    \n";

        ChessPieces[1] += L"                    \n";
        ChessPieces[1] += L"                    \n";
        ChessPieces[1] += L"                    \n";
        ChessPieces[1] += L"                    \n";
        ChessPieces[1] += L"                    \n";
        ChessPieces[1] += L"                    \n";
        ChessPieces[1] += L"  0000 000000 0000  \n";
        ChessPieces[1] += L"  088700FFFF00FFF0  \n";
        ChessPieces[1] += L"  008777FFFFFFFF00  \n";
        ChessPieces[1] += L"   00000000000000   \n";
        ChessPieces[1] += L"    08877FFFFFF0    \n";
        ChessPieces[1] += L"    000000000000    \n";
        ChessPieces[1] += L"     0887FFFFF0     \n";
        ChessPieces[1] += L"     0887FFFFF0     \n";
        ChessPieces[1] += L"     0887FFFFF0     \n";
        ChessPieces[1] += L"     0887FFFFF0     \n";
        ChessPieces[1] += L"     0887FFFFF0     \n";
        ChessPieces[1] += L"     0887FFFFF0     \n";
        ChessPieces[1] += L"    000000000000    \n";
        ChessPieces[1] += L"    088777FFFFF0    \n";
        ChessPieces[1] += L"   00000000000000   \n";
        ChessPieces[1] += L"  0088777FFFFFFF00  \n";
        ChessPieces[1] += L"  088777777FFFFFF0  \n";
        ChessPieces[1] += L"  0000000000000000  \n";

        ChessPieces[2] += L"                    \n";
        ChessPieces[2] += L"                    \n";
        ChessPieces[2] += L"     000            \n";
        ChessPieces[2] += L"    088F0000        \n";
        ChessPieces[2] += L"    0887FFFF00      \n";
        ChessPieces[2] += L"     0087FFFFF0     \n";
        ChessPieces[2] += L"       087FFFFF0    \n";
        ChessPieces[2] += L"      08FFFFFFFF0   \n";
        ChessPieces[2] += L"    00877FFFFFFF0   \n";
        ChessPieces[2] += L"   08877FFFFFFFF0   \n";
        ChessPieces[2] += L"   088877FFFFFFF0   \n";
        ChessPieces[2] += L"  088777FFFFFFFF0   \n";
        ChessPieces[2] += L" 088877007FFFFF0    \n";
        ChessPieces[2] += L" 088000 0FFFFFF0    \n";
        ChessPieces[2] += L"  00    0FFFFFF0    \n";
        ChessPieces[2] += L"       07FFFFFF0    \n";
        ChessPieces[2] += L"      087FFFFF0     \n";
        ChessPieces[2] += L"     0887FFFFF0     \n";
        ChessPieces[2] += L"     0887FFFFF0     \n";
        ChessPieces[2] += L"    000000000000    \n";
        ChessPieces[2] += L"   088877FFFFFFF0   \n";
        ChessPieces[2] += L"  0000000000000000  \n";
        ChessPieces[2] += L"  088777777FFFFFF0  \n";
        ChessPieces[2] += L"  0000000000000000  \n";

        ChessPieces[3] += L"         000        \n";
        ChessPieces[3] += L"        087F0       \n";
        ChessPieces[3] += L"       087FFF0      \n";
        ChessPieces[3] += L"      087FFFFF0     \n";
        ChessPieces[3] += L"     087FFFFFF0     \n";
        ChessPieces[3] += L"    087FFFFFF0      \n";
        ChessPieces[3] += L"   0887FFFFF0  00   \n";
        ChessPieces[3] += L"   0877FFFF0  0F0   \n";
        ChessPieces[3] += L"  088777FFF0 0FFF0  \n";
        ChessPieces[3] += L"  088777FFFF0FFFF0  \n";
        ChessPieces[3] += L"  088877FFFFFFFFF0  \n";
        ChessPieces[3] += L"  088877FFFFFFFFF0  \n";
        ChessPieces[3] += L"   088877FFFFFFF0   \n";
        ChessPieces[3] += L"   088877FFFFFFF0   \n";
        ChessPieces[3] += L"   088887FFFFFFF0   \n";
        ChessPieces[3] += L"    08887FFFFFF0    \n";
        ChessPieces[3] += L"    08887FFFFFF0    \n";
        ChessPieces[3] += L"     0887FFFFF0     \n";
        ChessPieces[3] += L"     08777FFFF0     \n";
        ChessPieces[3] += L"    000000000000    \n";
        ChessPieces[3] += L"   088877FFFFFFF0   \n";
        ChessPieces[3] += L"  0000000000000000  \n";
        ChessPieces[3] += L"  088777777FFFFFF0  \n";
        ChessPieces[3] += L"  0000000000000000  \n";

        ChessPieces[4] += L"                    \n";
        ChessPieces[4] += L"                    \n";
        ChessPieces[4] += L"                    \n";
        ChessPieces[4] += L"                    \n";
        ChessPieces[4] += L"                    \n";
        ChessPieces[4] += L"                    \n";
        ChessPieces[4] += L" 00      00      00 \n";
        ChessPieces[4] += L" 080    0FF0    0F0 \n";
        ChessPieces[4] += L" 0870   0FF0   0FF0 \n";
        ChessPieces[4] += L" 087F0   00   0FFF0 \n";
        ChessPieces[4] += L" 087F0  0FF0  0FFF0 \n";
        ChessPieces[4] += L" 087FF00FFFF00FFFF0 \n";
        ChessPieces[4] += L" 0877FFFFFFFFFFFFF0 \n";
        ChessPieces[4] += L" 0877FFFFFFFFFFFFF0 \n";
        ChessPieces[4] += L"  0887FFFFFFFFFFF0  \n";
        ChessPieces[4] += L"   08887FFFFFFFF0   \n";
        ChessPieces[4] += L"    000000000000    \n";
        ChessPieces[4] += L"    0887FFFFFFF0    \n";
        ChessPieces[4] += L"     0000000000     \n";
        ChessPieces[4] += L"   00000000000000   \n";
        ChessPieces[4] += L"   08877FFFFFFFF0   \n";
        ChessPieces[4] += L"  0000000000000000  \n";
        ChessPieces[4] += L"  08888777FFFFFFF0  \n";
        ChessPieces[4] += L"  0000000000000000  \n";

        ChessPieces[5] += L"                    \n";
        ChessPieces[5] += L"                    \n";
        ChessPieces[5] += L"                    \n";
        ChessPieces[5] += L"                    \n";
        ChessPieces[5] += L"                    \n";
        ChessPieces[5] += L"                    \n";
        ChessPieces[5] += L"                    \n";
        ChessPieces[5] += L"  0000   00   0000  \n";
        ChessPieces[5] += L" 08877000FF000FFFF0 \n";
        ChessPieces[5] += L"0887FFFF0FF0FFFFFFF0\n";
        ChessPieces[5] += L"087FFFFFF00FFFFFFFF0\n";
        ChessPieces[5] += L"087FFFFFFFFFFFFFFFF0\n";
        ChessPieces[5] += L"087FFFFFFFFFFFFFFFF0\n";
        ChessPieces[5] += L"087FFFFFFFFFFFFFFFF0\n";
        ChessPieces[5] += L"0877FFFFFFFFFFFFFFF0\n";
        ChessPieces[5] += L"0887FFFFFFFFFFFFFFF0\n";
        ChessPieces[5] += L" 0887FFFFFFFFFFFFF0 \n";
        ChessPieces[5] += L" 08887FFFFFFFFFFFF0 \n";
        ChessPieces[5] += L"  0888877FFFFFFFF0  \n";
        ChessPieces[5] += L"   00000000000000   \n";
        ChessPieces[5] += L"   08877FFFFFFFF0   \n";
        ChessPieces[5] += L"  0000000000000000  \n";
        ChessPieces[5] += L"  08888777FFFFFFF0  \n";
        ChessPieces[5] += L"  0000000000000000  \n";
        return JTRUE;
    }

    JVOID CString(JCFLOAT x, JCFLOAT y, JCWSTR &str, JCCHAR Team)
    {
        JCHAR STR;
        JSHORT x_adder = 0, y_adder = 0;
        for (JSHORT i = 0; i < str.size(); i++)
        {
            if (str[i] == L'\n')
            {
                x_adder = 0;
                y_adder++;
                continue;
            }
            x_adder++;
            if (str[i] == L' ')
                continue;
            STR = str[i];
            if (Team == 'B')
                STR = (str[i] == 'F')   ? 'B'
                      : (str[i] == '7') ? '3'
                      : (str[i] == '8') ? '1'
                                        : '0';
            this->Draw(x + x_adder - 1, y + y_adder, S1, (this->getColor(STR) | BG_BLACK));
        }
    }

    JBOOL onUserUpdate(float ElapseTime)
    {
        Clear(S0, BG_BLACK);
        for (JSHORT py = 0; py < BRows; py++)
            for (JSHORT px = 0; px < BCols; px++)
            {
                DrawBox(BlockW, BlockW, BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW, S1,
                        ((px + py) % 2 == 0) ? FG_LWHITE : FG_LBLUE, 1);

                if (Board[py * BCols + px] == 'P')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[0], 'W');
                else if (Board[py * BCols + px] == 'p')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[0], 'B');
                else if (Board[py * BCols + px] == 'R')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[1], 'W');
                else if (Board[py * BCols + px] == 'r')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[1], 'B');
                else if (Board[py * BCols + px] == 'N')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[2], 'W');
                else if (Board[py * BCols + px] == 'n')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[2], 'B');
                else if (Board[py * BCols + px] == 'B')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[3], 'W');
                else if (Board[py * BCols + px] == 'b')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[3], 'B');
                else if (Board[py * BCols + px] == 'Q')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[4], 'W');
                else if (Board[py * BCols + px] == 'q')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[4], 'B');
                else if (Board[py * BCols + px] == 'K')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[5], 'W');
                else if (Board[py * BCols + px] == 'k')
                    CString(BlockW + px * BlockW, (BlockW + (GetHeight() - GetWidth()) / 2) + py * BlockW - 5, ChessPieces[5], 'B');
            }

        return JTRUE;
    }
};

int main()
{
    WWindow window = WWindow();
    window.Start();
    return 0;
}
